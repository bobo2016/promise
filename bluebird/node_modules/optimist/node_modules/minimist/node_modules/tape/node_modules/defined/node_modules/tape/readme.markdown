# tape

tap-producing test harness for node and browsers

[![build status](https://secure.travis-ci.org/substack/tape.png)](http://travis-ci.org/substack/tape)

# browser compatibility

chrome, firefox, opera, safari, IE6, IE7, IE8, IE9

using browserify@1.16.5

# example

``` js
var test = require('tape');

test('timing test', function (t) {
    t.plan(2);
    
    t.equal(typeof Date.now, 'function');
    var start = Date.now();
    
    setTimeout(function () {
        t.equal(Date.now() - start, 100);
    }, 100);
});
```

```
$ node example/timing.js
TAP version 13
# timing test
ok 1 should be equal
not ok 2 should be equal
  ---
    operator: equal
    expected: 100
    actual:   107
  ...

1..2
# tests 2
# pass  1
# fail  1
```

# methods

The assertion methods in tape are heavily influenced or copied from the methods
in [node-tap](https://github.com/isaacs/node-tap).

```
var test = require('tape')
```

## test(name, cb)

Create a new test with an optional `name` string. `cb(t)` fires with the new
test object `t` once all preceeding tests have finished. Tests execute serially.

If you forget to `t.plan()` out how many assertions you are going to run and you
don't call `t.end()` explicitly, your test will hang.

## t.plan(n)

Declare that `n` assertions should be run. `t.end()` will be called
automatically after the `n`th assertion. If there are any more assertions after
the `n`th, or after `t.end()` is called, they will generate errors.

## t.end()

Declare the end of a test explicitly.

## t.fail(msg)
