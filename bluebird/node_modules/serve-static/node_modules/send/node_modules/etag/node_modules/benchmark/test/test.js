;(function(window, undefined) {
  'use strict';

  /** Use a single load function */
  var load = typeof require == 'function' ? require : window.load;

  /** The `platform` object to check */
  var platform =
    window.platform ||
    load('../vendor/platform.js/platform.js') ||
    window.platform;

  /** The unit testing framework */
  var QUnit =
    window.QUnit || (
      window.setTimeout || (window.addEventListener = window.setTimeout = / /),
      window.QUnit = load('../vendor/qunit/qunit/qunit' + (platform.name == 'Narwhal' ? '-1.8.0' : '') + '.js') || window.QUnit,
      load('../vendor/qunit-clib/qunit-clib.js'),
      (window.addEventListener || 0).test && delete window.addEventListener,
      window.QUnit
    );

  /** The `Benchmark` constructor to test */
  var Benchmark =
    window.Benchmark || (
      Benchmark = load('../benchmark.js') || window.Benchmark,
      Benchmark.Benchmark || Benchmark
    );

  /** API shortcut */
  var forOwn = Benchmark.forOwn;

  /** Used to get property descriptors */
  var getDescriptor = Object.getOwnPropertyDescriptor;

  /** Used to set property descriptors */
  var setDescriptor = Object.defineProperty;

  /** Shortcut used to convert array-like objects to arrays */
  var slice = [].slice;

  /** Used to resolve a value's internal [[Class]] */
  var toString = {}.toString;

  /** Used to check problem JScript properties (a.k.a. the [[DontEnum]] bug) */
  var shadowed = {
    'constructor': 1,
    'hasOwnProperty': 2,
    'isPrototypeOf': 3,
    'propertyIsEnumerable': 4,
    'toLocaleString': 5,
    'toString': 6,
    'valueOf': 7
  };

  /** Used to flag environments/features */
  var support = {
    'descriptors': !!function() {
      try {
        var o = {};
        return (setDescriptor(o, o, o), 'value' in getDescriptor(o, o));
      } catch(e) { }
    }()
  };

  /*--------------------------------------------------------------------------*/

  /**
   * Skips a given number of tests with a passing result.
   *
   * @private
   * @param {Number} [count=1] The number of tests to skip.
   */
  function skipTest(count) {
    count || (count = 1);
    while (count--) {
      ok(true, 'test skipped');
    }
  }

  /*--------------------------------------------------------------------------*/

  // init Benchmark.options.minTime
  Benchmark(function() { throw 0; }).run();

  // set a shorter max time
  Benchmark.options.maxTime = Benchmark.options.minTime * 5;

  // explicitly call `QUnit.module()` instead of `module()`
  // in case we are in a CLI environment
  QUnit.module('Benchmark');

  (function() {
    test('has the default `Benchmark.platform` value', function() {
      if (window.document) {
        equal(String(Benchmark.platform), navigator.userAgent);
      } else {
        skipTest(1)
      }
    });

    test('supports loading Benchmark.js as a module', function() {
      if (window.document && window.require) {
        equal((Benchmark2 || {}).version, Benchmark.version);
      } else {
        skipTest(1)
      }
    });

    test('supports loading Platform.js as a module', function() {
      if (window.document && window.require) {
        var platform = (Benchmark2 || {}).platform || {};
        equal(typeof platform.name, 'string');
      } else {
        skipTest(1)
      }
    });
  }());

  /*--------------------------------------------------------------------------*/

  QUnit.module('Benchmark constructor');

  (function() {
    test('creates a new instance when called without the `new` operator', function() {
      ok(Benchmark() instanceo